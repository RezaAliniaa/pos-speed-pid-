#include <PIDController.h>
#include <PID_v1.h>  

#define ENCODER_A 34
#define ENCODER_B 35

const int freq = 20000;
const int pwmChannel = 0;
const int resolution = 8;


#define MOTOR_pin1  27
#define MOTOR_pin2 26
#define MOTOR_pwm 12


#define __Kp 260 
#define __Ki 2.7 /
#define __Kd 2000 
volatile long int encoder_count = 0; 
unsigned int integerValue = 0; 
char incomingByte; 
float motor_pwm_value = 0; 

PIDController pidcontroller;
//-----------------------------------SPEED CONTROL PID SETUP ---

double kp = 5 , ki = 1 , kd = 0.01 ,input = 0, output = 0, setpoint = 0; 
long wheel_speed ;

volatile long encoderPos = 0;
PID speedpid(&input, &output, &setpoint, kp, ki, kd, DIRECT);  

//----------------------------------------------------------------
void setup() {
  Serial.begin(115200); 
  pinMode(ENCODER_A, INPUT_PULLUP); 
  pinMode(ENCODER_B, INPUT_PULLUP); 
  pinMode(MOTOR_pin1, OUTPUT); 
  pinMode(MOTOR_pin2, OUTPUT);
  pinMode (MOTOR_pwm,OUTPUT); 

  digitalWrite(MOTOR_pwm,LOW);


  ledcSetup(pwmChannel, freq, resolution); 
  ledcAttachPin(MOTOR_pwm, 0); //(enable1Pin, pwmChannel)
  
  attachInterrupt(digitalPinToInterrupt(ENCODER_A), encoder, RISING);
  pidcontroller.begin(); // initialize the PID instance
  pidcontroller.tune(260, 2.7, 2000); // Tune the PID, arguments: kP, kI, kD
  pidcontroller.limit(-255, 255); 

//-----------------------------------SPEED CONTROL PID SETUP ---
  speedpid.SetMode(AUTOMATIC);
  speedpid.SetSampleTime(1);
  speedpid.SetOutputLimits(-255, 255);
//----------------------------------------------------------------------

}

void loop() {
  

  while (Serial.available() > 0) {
    integerValue = Serial.parseInt(); // stores the integerValue
    incomingByte = Serial.read(); // stores the /n character
    if (incomingByte == '\n') // if we receive a newline character we will continue in the loop
      continue;
  }

  pidcontroller.setpoint(integerValue); // The "goal" the PID controller tries to "reach",
  Serial.println(integerValue); // print the incoming value for debugging
  input = pidcontroller.compute(encoder_count/6);  //Let the PID compute the value, returns the calculated optimal output
  Serial.print(motor_pwm_value); // print the calculated value for debugging

  wheel_speed+=10;
  setpoint = wheel_speed/500;
  speedpid.Compute(); 
  motor_pwm_value = output;

  Serial.print("   ");

  if (motor_pwm_value > 0) // if the motor_pwm_value is greater than zero we rotate the  motor in clockwise direction
    motor_ccw(motor_pwm_value);
  else // else we move it in a counter clockwise direction
    motor_cw(abs(motor_pwm_value));
  Serial.println(encoder_count/6);// print the final encoder count.
}

void encoder() {
  if (digitalRead(ENCODER_B) == HIGH) // if ENCODER_B is high increase the count
    encoder_count++; // increment the count
  else // else decrease the count
    encoder_count--;  // decrement the count
}


void motor_cw(int power) {
  
  if (power > 1) {
    ledcWrite(pwmChannel, power);   
    // analogWrite(MOTOR_CW, power); 
    digitalWrite(MOTOR_pin1, HIGH);
    digitalWrite(MOTOR_pin2, LOW);
     
  }
  else {
    // both of the pins are set to low    
    digitalWrite(MOTOR_pin1, LOW);
    digitalWrite(MOTOR_pin2, LOW);
  }
}


void motor_ccw(int power) {
  if (power > 1) {
    ledcWrite(pwmChannel, power);
    digitalWrite(MOTOR_pin1, LOW);
    digitalWrite(MOTOR_pin2, HIGH);
  }
  else {
    digitalWrite(MOTOR_pin1, LOW);
    digitalWrite(MOTOR_pin2, LOW);
  }
}
